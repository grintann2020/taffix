using System;
using UnityEngine;
using Unity.Entities;

namespace T {
    public class Program : MonoBehaviour {
        [SerializeField] private GameObject _hexPrefab;
        private Entity _hexEntityPrefab;
        
        public DataSetSO DataSet = null;
        public ESize size;
        private Camera _cam;
        private Interact _interact = new Interact();
        private Control _ctrl = new Control();
        private Space _space = new Space();
        private ECS _ecs = new ECS();
        private HexCalc _hexCalc = new HexCalc();

        void Start() {
            double a = DateTime.Now.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds;
            this.Init();
            double b = DateTime.Now.Subtract(new DateTime(1970, 1, 1)).TotalMilliseconds;
            Debug.Log("Init Done (ms) --> " + (b - a));
        }

        void Update() {
            _ctrl.InvokeUpdate();
        }

        public void Init() {
            _cam = Camera.main;

            DataSet.Init();
            

            // Debug.Log(colorSchemes[0].colorDictionary[EColor.Red].levels[0].linear);

            // var settings = GameObjectConversionSettings.FromWorld(World.DefaultGameObjectInjectionWorld, null);

            // _hexEntityPrefab = GameObjectConversionUtility.ConvertGameObjectHierarchy(_hexPrefab, settings);


            _ecs.Init();
            _ecs.Create(
                EEntity.Hex_0,
                EArchetype.Static,
                ((HexDataSO)DataSet.GetData(EData.Hex)).GetItem(EHexItem.Interactable).Mesh,
                ((HexDataSO)DataSet.GetData(EData.Hex)).GetItem(EHexItem.Interactable).Material
            );
            _space.Init();
            _space.Bind(_ecs, _hexCalc);

            _ctrl.Init(_cam, _ecs);

            int[,] testArr = new int[11, 9] {
                {3, 0, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 0},
                {3, 0, 1, 0, 3, 1, 0, 0, 0},
                {0, 0, 0, 0, 0, 2, 0, 1, 0},
                {3, 0, 1, 2, 3, 1, 3, 2, 0},
                {0, 0, 0, 0, 0, 0, 2, 0, 0},
                {0, 0, 2, 0, 0, 0, 0, 1, 0},
                {0, 0, 2, 0, 0, 0, 0, 1, 0},
                {3, 0, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0}
            };

            int[,] testAr100 = new int[10, 10] {
                {3, 0, 3, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 0, 0, 1, 0, 0},
                {3, 0, 1, 0, 3, 1, 0, 0, 0, 0},
                {0, 0, 0, 0, 0, 2, 0, 1, 0, 0},
                {3, 0, 1, 2, 3, 1, 3, 2, 0, 0},
                {0, 0, 0, 0, 0, 0, 2, 0, 0, 0},
                {0, 0, 2, 0, 0, 0, 0, 1, 0, 0},
                {0, 0, 2, 0, 0, 0, 0, 1, 0, 0},
                {3, 0, 3, 0, 3, 0, 3, 0, 0, 0}
            };

            int[,] testArr25_4 = new int[25, 4] {
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0},
                {0, 0, 0, 0}
            };

            int[,] testArr40_20 = new int[40, 20] {
                {3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 3, 0, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 3, 1, 0},
                {0, 2, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 0, 3, 1, 3, 0, 3, 0, 0, 1, 2, 3, 0, 3, 0, 2, 0, 0},
                {0, 1, 2, 1, 3, 0, 1, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 3, 1, 0},
                {0, 2, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 3, 1},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 3, 0, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {3, 0, 3, 0, 3, 0, 3, 0, 3, 0, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 3, 0, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 3, 1, 0},
                {0, 2, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 0, 3, 1, 3, 0, 3, 0, 0, 1, 2, 3, 0, 3, 0, 2, 0, 0},
                {0, 1, 2, 1, 3, 0, 1, 1, 0, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 0, 0, 3, 0, 0, 0, 0, 0, 2, 2, 0, 1, 2, 3, 1, 0},
                {0, 2, 2, 0, 1, 0, 1, 0, 1, 0, 0, 0, 1, 0, 0, 0, 2, 1, 3, 1},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0},
                {0, 0, 1, 0, 3, 0, 3, 1, 0, 0, 0, 0, 2, 0, 2, 1, 0, 3, 0, 0},
                {0, 0, 2, 1, 1, 0, 1, 0, 1, 0, 0, 0, 1, 3, 0, 0, 2, 1, 3, 1},
                {3, 0, 3, 1, 2, 0, 3, 0, 0, 1, 0, 0, 2, 3, 0, 3, 0, 3, 0, 0},
                {0, 0, 2, 1, 3, 0, 1, 1, 3, 0, 2, 0, 1, 1, 0, 0, 2, 1, 3, 0}
            };

            int[,] hArr2 = new int[5, 5] {
                {0, 0, 0, 0, 0},
                {0, 1, 2, 0, 0},
                {0, 1, 3, 1, 0},
                {0, 1, 2, 0, 0},
                {0, 0, 0, 0, 0},
            };

            _space.Construct(testArr40_20, size);
            Excute();
        }

        public void Excute() {
            _space.Instantiate();
            // _space.Instantiate2(_hexEntityPrefab);
        }
    }
}